{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SAMTTS Documentation A Python port of Software Automatic Mouth Test-To-Speech program. Ported by: Quan Lin License: None WARNING : This project is not under any open source software license. Use it at your own risk. What is SAM? SAM is the Text-To-Speech (TTS) software SAM (Software Automatic Mouth) for the Commodore C64 published in the year 1982 by Don't Ask Software (now SoftVoice, Inc.). This project is an unofficial Python port of SAM. It is translated by hand from the adaption to C by Stefan Macke and the refactorings by Vidar Hokstad . Installation pip install samtts Usage Use samtts in Python script The minimum example: from samtts import SamTTS SamTTS().play(\"Hello. My name is Sam.\") A conversation between Sam and Little Robot: from samtts import SamTTS # The default config is Sam. sam = SamTTS() # Config SamTTS for a different character. robot = SamTTS(speed=92, pitch=60, mouth=190, throat=190) sam.play(\"Hello. Little Robot. How are you today?\") robot.play(\"Hello! I am functioning well, thank you. How can I assist you today?\") sam.play(\"Could you hand me the hammer please?\") robot.play(\"Of course! Here you are.\") sam.play(\"Thank you very much!\") SamTTS does not pronouce all the words correctly. Sometimes you may want to use phonemes directly. Phonemes are powerful and flexible. But make sure the phonemes are valid, otherwise it will raise exceptions. from samtts import SamTTS # Make SamTTS say \"Hello. My name is Sam.\" in phonemes. SamTTS().play(\"/HEHLOH3OW. MAY4 NEY4M IHZ SAE4M.\", phonetic=True) Make SamTTS sing: from samtts import SamTTS singer = SamTTS(speed=200, mouth=90, throat=90, sing_mode=True) for pitch in (52, 41, 34, 41, 52): singer.play(\"AHAHAHAHAHAHAHAH\", phonetic=True, pitch=pitch) Save the audio data generated by SamTTS to a wav file: from samtts import SamTTS SamTTS().save(\"Hello. My name is Sam.\", \"output.wav\") Use SamTTS with asyncio : import asyncio from samtts import SamTTS asyncio.run(SamTTS().async_play(\"Hello. My name is Sam.\")) The core of samtts consists of Reciter , Processor and Renderer . SamTTS is a combination of the three. Reciter converts text to phonemes. Processor and Renderer turns phonemes into audio data in bytearray . But they can only process very short inputs. To work around this, SamTTS splits the input paragraph by punctuations !,.:;? . It works for most of the cases, but not always. You can design your own functions to split the input paragraph. Make SamTTS read the paragraph word by word: from samtts import SamTTS def iter_by_space(paragraph): for item in paragraph.split(): yield item SamTTS().play( \"Hello. My name is Sam.\", iter_segments_from_paragraph = iter_by_space, ) In case you know your input is very small, you do not have to split it at all: from samtts import SamTTS def iter_no_split(paragraph): yield paragraph SamTTS().play( \"Hello. My name is Sam.\", iter_segments_from_paragraph = iter_no_split, ) By default SamTTS saves audio data in wav format. But you can design your own save function to save audio data in other formats: from samtts import SamTTS # Make sure this function signature is followed. def save_audio_data_in_other_formats( audio_data: bytes | bytearray, output_file_path: str, num_channels: int = 1, bytes_per_sample: int = 1, sample_rate: int = 22050, ): ... SamTTS().save( \"Hello. My name is Sam.\", \"output.ext\", save_audio_data = save_audio_data_in_other_formats, ) By default SamTTS plays audio with simpleaudio backend. But you can design your own play audio function to play audio with other audio backends: from samtts import SamTTS # Make sure this function signature is followed. def play_audio_data_with_other_backends( audio_data: bytes | bytearray, num_channels: int = 1, bytes_per_sample: int = 1, sample_rate: int = 22050, ): ... SamTTS().play( \"Hello. My name is Sam.\", play_audio_data = play_audio_data_with_other_backends, ) There are more examples in examples directory. Use samtts with command line interface To get help information: python -m samtts Usage: python -m samtts [OPTIONS] [INPUT_STRING] A python port of Software Automatic Mouth Test-To-Speech program. - If `--phoneme-info` or `--pitch-info` is used, the argument and all the other options are ignored. - If `--phonetic` is used, the input must be valid phonemes. \u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 input_string [INPUT_STRING] Input text or phonemes. \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 --phoneme-info --no-phoneme-info Show phoneme info. \u2502 \u2502 [default: \u2502 \u2502 no-phoneme-info] \u2502 \u2502 --pitch-info --no-pitch-info Show pitch info. \u2502 \u2502 [default: no-pitch-info] \u2502 \u2502 --phonetic --no-phonetic Set phonetic flag. \u2502 \u2502 [default: no-phonetic] \u2502 \u2502 --speed INTEGER Set speed value. \u2502 \u2502 [default: 72] \u2502 \u2502 --pitch INTEGER Set pitch value. \u2502 \u2502 [default: 64] \u2502 \u2502 --mouth INTEGER Set mouth value. \u2502 \u2502 [default: 128] \u2502 \u2502 --throat INTEGER Set throat value. \u2502 \u2502 [default: 128] \u2502 \u2502 --sing --no-sing Set sing mode. \u2502 \u2502 [default: no-sing] \u2502 \u2502 --sample-rate INTEGER Set sample rate 11025 or \u2502 \u2502 22050. \u2502 \u2502 [default: 22050] \u2502 \u2502 --wav TEXT Set output wav file name \u2502 \u2502 or path. \u2502 \u2502 --debug --no-debug Set debug flag. \u2502 \u2502 [default: no-debug] \u2502 \u2502 --install-completion Install completion for \u2502 \u2502 the current shell. \u2502 \u2502 --show-completion Show completion for the \u2502 \u2502 current shell, to copy \u2502 \u2502 it or customize the \u2502 \u2502 installation. \u2502 \u2502 --help Show this message and \u2502 \u2502 exit. \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f The minimum example: python -m samtts \"Hello. My name is Sam.\" To config its voice: python -m samtts --speed 92 --pitch 60 --mouth 190 --throat 190 \"Hello. My name is Little Robot.\" To save to a wav file: python -m samtts --wav \"output.wav\" \"Hello. My name is Sam.\" Useful information Phonemes Phoneme Information VOWELS VOICED CONSONANTS IY f(ee)t R red IH p(i)n L allow EH beg W away AE Sam W whale AA pot Y you AH b(u)dget M Sam AO t(al)k N man OH cone NX so(ng) UH book B bad UX l(oo)t D dog ER bird G again AX gall(o)n J judge IX dig(i)t Z zoo ZH plea(s)ure DIPHTHONGS V seven EY m(a)de DH (th)en AY h(igh) OY boy AW h(ow) UNVOICED CONSONANTS OW slow S Sam UW crew Sh fish F fish TH thin SPECIAL PHONEMES P poke UL sett(le) (=AXL) T talk UM astron(omy) (=AXM) K cake UN functi(on) (=AXN) CH speech Q kitt-en (glottal stop) /H a(h)ead Pitches Pitch Information PITCH NOTE | PITCH NOTE | PITCH NOTE 104 C1 | 52 C2 | 26 C3 92 D1 | 46 D2 | 23 D3 82 E1 | 41 E2 | 21 E3 78 F1 | 39 F2 | 19 F3 68 G1 | 34 G2 | 17 G3 62 A1 | 31 A2 | 55 B1 | 28 B2 | Characters DESCRIPTION SPEED PITCH MOUTH THROAT Elf 72 64 160 110 Little Robot 92 60 190 190 Stuffy Guy 82 72 105 110 Little Old Lady 82 32 145 145 Extra-Terrestrial 100 64 200 150 SAM 72 64 128 128 Limitations SAM was developed more than 40 years ago. It was advanced in 1980s. But now its sound quality is not comparable to AI based TTS programs. The core of SAM can only process very short inputs. To work around this, long inputs must be split. SAM does not pronouce all the words correctly. To work around this, phonemes can be used directly. But make sure the phonemes are valid, otherwise it will raise exceptions. Further development This project is meant to be a fairly faithful port of the original SAM. It will not improve upon SAM in any manner, like improving the quality of the sound or breaking the limitations of SAM. The further development of this project is limited to bug fixing. If anyone is interested in improving it, please fork it and start a new project. About license According to Stefan Macke and Vidar Hokstad the status of the original software can be best described as Abandonware . Neither Stefan Macke nor Vidar Hokstad put their projects under any open source software license. As long this is the case I cannot put my code under any open source software license either. However the software might be used under the \"Fair Use\" act in the USA. References Software Automatic Mouth on wikipedia SAM in C by Stefan Macke Refactored SAM in C by Vidar Hokstad SAM in Javascript by Christian Schiffler","title":"Home"},{"location":"#samtts","text":"Documentation A Python port of Software Automatic Mouth Test-To-Speech program. Ported by: Quan Lin License: None WARNING : This project is not under any open source software license. Use it at your own risk.","title":"SAMTTS"},{"location":"#what-is-sam","text":"SAM is the Text-To-Speech (TTS) software SAM (Software Automatic Mouth) for the Commodore C64 published in the year 1982 by Don't Ask Software (now SoftVoice, Inc.). This project is an unofficial Python port of SAM. It is translated by hand from the adaption to C by Stefan Macke and the refactorings by Vidar Hokstad .","title":"What is SAM?"},{"location":"#installation","text":"pip install samtts","title":"Installation"},{"location":"#usage","text":"","title":"Usage"},{"location":"#use-samtts-in-python-script","text":"The minimum example: from samtts import SamTTS SamTTS().play(\"Hello. My name is Sam.\") A conversation between Sam and Little Robot: from samtts import SamTTS # The default config is Sam. sam = SamTTS() # Config SamTTS for a different character. robot = SamTTS(speed=92, pitch=60, mouth=190, throat=190) sam.play(\"Hello. Little Robot. How are you today?\") robot.play(\"Hello! I am functioning well, thank you. How can I assist you today?\") sam.play(\"Could you hand me the hammer please?\") robot.play(\"Of course! Here you are.\") sam.play(\"Thank you very much!\") SamTTS does not pronouce all the words correctly. Sometimes you may want to use phonemes directly. Phonemes are powerful and flexible. But make sure the phonemes are valid, otherwise it will raise exceptions. from samtts import SamTTS # Make SamTTS say \"Hello. My name is Sam.\" in phonemes. SamTTS().play(\"/HEHLOH3OW. MAY4 NEY4M IHZ SAE4M.\", phonetic=True) Make SamTTS sing: from samtts import SamTTS singer = SamTTS(speed=200, mouth=90, throat=90, sing_mode=True) for pitch in (52, 41, 34, 41, 52): singer.play(\"AHAHAHAHAHAHAHAH\", phonetic=True, pitch=pitch) Save the audio data generated by SamTTS to a wav file: from samtts import SamTTS SamTTS().save(\"Hello. My name is Sam.\", \"output.wav\") Use SamTTS with asyncio : import asyncio from samtts import SamTTS asyncio.run(SamTTS().async_play(\"Hello. My name is Sam.\")) The core of samtts consists of Reciter , Processor and Renderer . SamTTS is a combination of the three. Reciter converts text to phonemes. Processor and Renderer turns phonemes into audio data in bytearray . But they can only process very short inputs. To work around this, SamTTS splits the input paragraph by punctuations !,.:;? . It works for most of the cases, but not always. You can design your own functions to split the input paragraph. Make SamTTS read the paragraph word by word: from samtts import SamTTS def iter_by_space(paragraph): for item in paragraph.split(): yield item SamTTS().play( \"Hello. My name is Sam.\", iter_segments_from_paragraph = iter_by_space, ) In case you know your input is very small, you do not have to split it at all: from samtts import SamTTS def iter_no_split(paragraph): yield paragraph SamTTS().play( \"Hello. My name is Sam.\", iter_segments_from_paragraph = iter_no_split, ) By default SamTTS saves audio data in wav format. But you can design your own save function to save audio data in other formats: from samtts import SamTTS # Make sure this function signature is followed. def save_audio_data_in_other_formats( audio_data: bytes | bytearray, output_file_path: str, num_channels: int = 1, bytes_per_sample: int = 1, sample_rate: int = 22050, ): ... SamTTS().save( \"Hello. My name is Sam.\", \"output.ext\", save_audio_data = save_audio_data_in_other_formats, ) By default SamTTS plays audio with simpleaudio backend. But you can design your own play audio function to play audio with other audio backends: from samtts import SamTTS # Make sure this function signature is followed. def play_audio_data_with_other_backends( audio_data: bytes | bytearray, num_channels: int = 1, bytes_per_sample: int = 1, sample_rate: int = 22050, ): ... SamTTS().play( \"Hello. My name is Sam.\", play_audio_data = play_audio_data_with_other_backends, ) There are more examples in examples directory.","title":"Use samtts in Python script"},{"location":"#use-samtts-with-command-line-interface","text":"To get help information: python -m samtts Usage: python -m samtts [OPTIONS] [INPUT_STRING] A python port of Software Automatic Mouth Test-To-Speech program. - If `--phoneme-info` or `--pitch-info` is used, the argument and all the other options are ignored. - If `--phonetic` is used, the input must be valid phonemes. \u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 input_string [INPUT_STRING] Input text or phonemes. \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 --phoneme-info --no-phoneme-info Show phoneme info. \u2502 \u2502 [default: \u2502 \u2502 no-phoneme-info] \u2502 \u2502 --pitch-info --no-pitch-info Show pitch info. \u2502 \u2502 [default: no-pitch-info] \u2502 \u2502 --phonetic --no-phonetic Set phonetic flag. \u2502 \u2502 [default: no-phonetic] \u2502 \u2502 --speed INTEGER Set speed value. \u2502 \u2502 [default: 72] \u2502 \u2502 --pitch INTEGER Set pitch value. \u2502 \u2502 [default: 64] \u2502 \u2502 --mouth INTEGER Set mouth value. \u2502 \u2502 [default: 128] \u2502 \u2502 --throat INTEGER Set throat value. \u2502 \u2502 [default: 128] \u2502 \u2502 --sing --no-sing Set sing mode. \u2502 \u2502 [default: no-sing] \u2502 \u2502 --sample-rate INTEGER Set sample rate 11025 or \u2502 \u2502 22050. \u2502 \u2502 [default: 22050] \u2502 \u2502 --wav TEXT Set output wav file name \u2502 \u2502 or path. \u2502 \u2502 --debug --no-debug Set debug flag. \u2502 \u2502 [default: no-debug] \u2502 \u2502 --install-completion Install completion for \u2502 \u2502 the current shell. \u2502 \u2502 --show-completion Show completion for the \u2502 \u2502 current shell, to copy \u2502 \u2502 it or customize the \u2502 \u2502 installation. \u2502 \u2502 --help Show this message and \u2502 \u2502 exit. \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f The minimum example: python -m samtts \"Hello. My name is Sam.\" To config its voice: python -m samtts --speed 92 --pitch 60 --mouth 190 --throat 190 \"Hello. My name is Little Robot.\" To save to a wav file: python -m samtts --wav \"output.wav\" \"Hello. My name is Sam.\"","title":"Use samtts with command line interface"},{"location":"#useful-information","text":"","title":"Useful information"},{"location":"#phonemes","text":"Phoneme Information VOWELS VOICED CONSONANTS IY f(ee)t R red IH p(i)n L allow EH beg W away AE Sam W whale AA pot Y you AH b(u)dget M Sam AO t(al)k N man OH cone NX so(ng) UH book B bad UX l(oo)t D dog ER bird G again AX gall(o)n J judge IX dig(i)t Z zoo ZH plea(s)ure DIPHTHONGS V seven EY m(a)de DH (th)en AY h(igh) OY boy AW h(ow) UNVOICED CONSONANTS OW slow S Sam UW crew Sh fish F fish TH thin SPECIAL PHONEMES P poke UL sett(le) (=AXL) T talk UM astron(omy) (=AXM) K cake UN functi(on) (=AXN) CH speech Q kitt-en (glottal stop) /H a(h)ead","title":"Phonemes"},{"location":"#pitches","text":"Pitch Information PITCH NOTE | PITCH NOTE | PITCH NOTE 104 C1 | 52 C2 | 26 C3 92 D1 | 46 D2 | 23 D3 82 E1 | 41 E2 | 21 E3 78 F1 | 39 F2 | 19 F3 68 G1 | 34 G2 | 17 G3 62 A1 | 31 A2 | 55 B1 | 28 B2 |","title":"Pitches"},{"location":"#characters","text":"DESCRIPTION SPEED PITCH MOUTH THROAT Elf 72 64 160 110 Little Robot 92 60 190 190 Stuffy Guy 82 72 105 110 Little Old Lady 82 32 145 145 Extra-Terrestrial 100 64 200 150 SAM 72 64 128 128","title":"Characters"},{"location":"#limitations","text":"SAM was developed more than 40 years ago. It was advanced in 1980s. But now its sound quality is not comparable to AI based TTS programs. The core of SAM can only process very short inputs. To work around this, long inputs must be split. SAM does not pronouce all the words correctly. To work around this, phonemes can be used directly. But make sure the phonemes are valid, otherwise it will raise exceptions.","title":"Limitations"},{"location":"#further-development","text":"This project is meant to be a fairly faithful port of the original SAM. It will not improve upon SAM in any manner, like improving the quality of the sound or breaking the limitations of SAM. The further development of this project is limited to bug fixing. If anyone is interested in improving it, please fork it and start a new project.","title":"Further development"},{"location":"#about-license","text":"According to Stefan Macke and Vidar Hokstad the status of the original software can be best described as Abandonware . Neither Stefan Macke nor Vidar Hokstad put their projects under any open source software license. As long this is the case I cannot put my code under any open source software license either. However the software might be used under the \"Fair Use\" act in the USA.","title":"About license"},{"location":"#references","text":"Software Automatic Mouth on wikipedia SAM in C by Stefan Macke Refactored SAM in C by Vidar Hokstad SAM in Javascript by Christian Schiffler","title":"References"},{"location":"api/","text":"API Reference samtts SAMTTS A Python port of Software Automatic Mouth Test-To-Speech program. Ported by: Quan Lin License: None samtts.Reciter Reciter converts text to phonemes. Parameters: debug ( bool , default: False ) \u2013 Set or clear debug flag. samtts . Reciter . text_to_phonemes ( input_text ) Convert text to phonemes. Parameters: input_text ( str | bytes | bytearray ) \u2013 The input text to convert. Returns: bytearray \u2013 The phonemes bytearray. samtts.Processor Processor takes phonemes and prepares output parameters. Parameters: debug ( bool , default: False ) \u2013 Set or clear debug flag. samtts . Processor . process ( input_phonemes ) Process the phonemes and prepare output parameters. When it is successful, the output parameters are stored in: self.phoneme_index self.phoneme_length self.stress Parameters: input_phonemes ( str | bytes | bytearray ) \u2013 The input phonemes to process. Returns: bool \u2013 Whether the phonemes are processed successfully. samtts.Renderer Renderer takes the phoneme parameters and renders sound waveform. Parameters: speed ( int , default: 72 ) \u2013 Set speed value. pitch ( int , default: 64 ) \u2013 Set pitch value. mouth ( int , default: 128 ) \u2013 Set mouth value. throat ( int , default: 128 ) \u2013 Set throat value. sing_mode ( bool , default: False ) \u2013 Set or clear sing_mode flag. buffer_size ( int , default: 220500 ) \u2013 Set a large enough buffer size for rendering. debug ( bool , default: False ) \u2013 Set or clear debug flag. samtts . Renderer . config ( speed = None , pitch = None , mouth = None , throat = None , sing_mode = None ) Configure renderer parameters. Parameters: speed ( int | None , default: None ) \u2013 Set speed value. pitch ( int | None , default: None ) \u2013 Set pitch value. mouth ( int | None , default: None ) \u2013 Set mouth value. throat ( int | None , default: None ) \u2013 Set throat value. sing_mode ( bool | None , default: None ) \u2013 Set or clear sing_mode flag. samtts . Renderer . render ( processor ) Render sound waveform. When it is successful, the audio data is stored in self.buffer . And the length of the valid data is stored in self.buffer_end . Parameters: processor ( Processor ) \u2013 A Processor instance that has output parameters prepared. Returns: bool \u2013 Whether the sound waveform are rendered successfully. samtts.SamTTS SamTTS combines Reciter, Processor and Renderer together. Parameters: speed ( int , default: 72 ) \u2013 Set speed value. pitch ( int , default: 64 ) \u2013 Set pitch value. mouth ( int , default: 128 ) \u2013 Set mouth value. throat ( int , default: 128 ) \u2013 Set throat value. sing_mode ( bool , default: False ) \u2013 Set or clear sing_mode flag. buffer_size ( int , default: 220500 ) \u2013 Set a large enough buffer size for rendering. debug ( bool , default: False ) \u2013 Set or clear debug flag. samtts . SamTTS . get_audio_data ( input_data , phonetic = False , speed = None , pitch = None , mouth = None , throat = None , sing_mode = None , sample_rate = 22050 ) Get audio data from input text or phonemes. It can only process very short inputs. Parameters: input_data ( str | bytes | bytearray ) \u2013 The input text or phonemes. phonetic ( bool , default: False ) \u2013 The flag indicates if the input is phonemes. speed ( int | None , default: None ) \u2013 Set speed value. pitch ( int | None , default: None ) \u2013 Set pitch value. mouth ( int | None , default: None ) \u2013 Set mouth value. throat ( int | None , default: None ) \u2013 Set throat value. sing_mode ( bool | None , default: None ) \u2013 Set or clear sing_mode flag. sample_rate ( int , default: 22050 ) \u2013 The sample rate of the audio data. It can be one of 5513, 11025 and 22050. Returns: bytearray \u2013 The rendered audio data bytearray. samtts . SamTTS . iter_audio_data_from_paragraph ( paragraph , phonetic = False , speed = None , pitch = None , mouth = None , throat = None , sing_mode = None , sample_rate = 22050 , iter_segments_from_paragraph = iter_by_punctuations ) Get audio data from a paragraph segment by segment. Parameters: paragraph ( str ) \u2013 The input string paragraph. phonetic ( bool , default: False ) \u2013 The flag indicates if the input is phonemes. speed ( int | None , default: None ) \u2013 Set speed value. pitch ( int | None , default: None ) \u2013 Set pitch value. mouth ( int | None , default: None ) \u2013 Set mouth value. throat ( int | None , default: None ) \u2013 Set throat value. sing_mode ( bool | None , default: None ) \u2013 Set or clear sing_mode flag. sample_rate ( int , default: 22050 ) \u2013 The sample rate of the audio data. It can be one of 5513, 11025 and 22050. iter_segments_from_paragraph ( Callable , default: iter_by_punctuations ) \u2013 The iter_segments_from_paragraph function whose signature is: iter_segments_from_paragraph(paragraph: str) -> Iterable[str] Yields: Iterable [ bytearray ] \u2013 Audio data. samtts . SamTTS . save ( paragraph , output_file_path , phonetic = False , speed = None , pitch = None , mouth = None , throat = None , sing_mode = None , sample_rate = 22050 , iter_segments_from_paragraph = iter_by_punctuations , save_audio_data = save_audio_data_in_wav_format ) Save audio data from a paragraph to output file. Parameters: paragraph ( str ) \u2013 The input paragraph. output_file_path ( str ) \u2013 The path of the output file. phonetic ( bool , default: False ) \u2013 The flag indicates if the input is phonemes. speed ( int | None , default: None ) \u2013 Set speed value. pitch ( int | None , default: None ) \u2013 Set pitch value. mouth ( int | None , default: None ) \u2013 Set mouth value. throat ( int | None , default: None ) \u2013 Set throat value. sing_mode ( bool | None , default: None ) \u2013 Set or clear sing_mode flag. sample_rate ( int , default: 22050 ) \u2013 The sample rate of the audio data. It can be one of 5513, 11025 and 22050. iter_segments_from_paragraph ( Callable , default: iter_by_punctuations ) \u2013 The iter_segments_from_paragraph function whose signature is: iter_segments_from_paragraph(paragraph: str) -> Iterable[str] save_audio_data ( Callable , default: save_audio_data_in_wav_format ) \u2013 The save_audio_data function whose signature is: save_audio_data( audio_data: bytes | bytearray, output_file_path: str, num_channels: int, bytes_per_sample: int, sample_rate: int, ) samtts . SamTTS . play ( paragraph , phonetic = False , speed = None , pitch = None , mouth = None , throat = None , sing_mode = None , sample_rate = 22050 , iter_segments_from_paragraph = iter_by_punctuations , play_audio_data = play_audio_data_with_simpleaudio ) Play audio data from a paragraph. Parameters: paragraph ( str ) \u2013 The input paragraph. phonetic ( bool , default: False ) \u2013 The flag indicates if the input is phonemes. speed ( int | None , default: None ) \u2013 Set speed value. pitch ( int | None , default: None ) \u2013 Set pitch value. mouth ( int | None , default: None ) \u2013 Set mouth value. throat ( int | None , default: None ) \u2013 Set throat value. sing_mode ( bool | None , default: None ) \u2013 Set or clear sing_mode flag. sample_rate ( int , default: 22050 ) \u2013 The sample rate of the audio data. It can be one of 5513, 11025 and 22050. iter_segments_from_paragraph ( Callable , default: iter_by_punctuations ) \u2013 The iter_segments_from_paragraph function whose signature is: iter_segments_from_paragraph(paragraph: str) -> Iterable[str] play_audio_data ( Callable , default: play_audio_data_with_simpleaudio ) \u2013 The play_audio_data function whose signature is: play_audio_data( audio_data: bytes | bytearray, num_channels: int, bytes_per_sample: int, sample_rate: int, ) samtts . SamTTS . async_play ( paragraph , phonetic = False , speed = None , pitch = None , mouth = None , throat = None , sing_mode = None , sample_rate = 22050 , iter_segments_from_paragraph = iter_by_punctuations , async_play_audio_data = async_play_audio_data_with_simpleaudio ) async Async play audio data from a paragraph. Parameters: paragraph ( str ) \u2013 The input paragraph. phonetic ( bool , default: False ) \u2013 The flag indicates if the input is phonemes. speed ( int | None , default: None ) \u2013 Set speed value. pitch ( int | None , default: None ) \u2013 Set pitch value. mouth ( int | None , default: None ) \u2013 Set mouth value. throat ( int | None , default: None ) \u2013 Set throat value. sing_mode ( bool | None , default: None ) \u2013 Set or clear sing_mode flag. sample_rate ( int , default: 22050 ) \u2013 The sample rate of the audio data. It can be one of 5513, 11025 and 22050. iter_segments_from_paragraph ( Callable , default: iter_by_punctuations ) \u2013 The iter_segments_from_paragraph function whose signature is: iter_segments_from_paragraph(paragraph: str) -> Iterable[str] async_play_audio_data ( Awaitable , default: async_play_audio_data_with_simpleaudio ) \u2013 The async_play_audio_data function whose signature is: async_play_audio_data( audio_data: bytes | bytearray, num_channels: int, bytes_per_sample: int, sample_rate: int, )","title":"API Reference"},{"location":"api/#api-reference","text":"","title":"API Reference"},{"location":"api/#samtts","text":"SAMTTS A Python port of Software Automatic Mouth Test-To-Speech program. Ported by: Quan Lin License: None","title":"samtts"},{"location":"api/#samtts.Reciter","text":"Reciter converts text to phonemes. Parameters: debug ( bool , default: False ) \u2013 Set or clear debug flag.","title":"Reciter"},{"location":"api/#samtts.Reciter.text_to_phonemes","text":"Convert text to phonemes. Parameters: input_text ( str | bytes | bytearray ) \u2013 The input text to convert. Returns: bytearray \u2013 The phonemes bytearray.","title":"text_to_phonemes"},{"location":"api/#samtts.Processor","text":"Processor takes phonemes and prepares output parameters. Parameters: debug ( bool , default: False ) \u2013 Set or clear debug flag.","title":"Processor"},{"location":"api/#samtts.Processor.process","text":"Process the phonemes and prepare output parameters. When it is successful, the output parameters are stored in: self.phoneme_index self.phoneme_length self.stress Parameters: input_phonemes ( str | bytes | bytearray ) \u2013 The input phonemes to process. Returns: bool \u2013 Whether the phonemes are processed successfully.","title":"process"},{"location":"api/#samtts.Renderer","text":"Renderer takes the phoneme parameters and renders sound waveform. Parameters: speed ( int , default: 72 ) \u2013 Set speed value. pitch ( int , default: 64 ) \u2013 Set pitch value. mouth ( int , default: 128 ) \u2013 Set mouth value. throat ( int , default: 128 ) \u2013 Set throat value. sing_mode ( bool , default: False ) \u2013 Set or clear sing_mode flag. buffer_size ( int , default: 220500 ) \u2013 Set a large enough buffer size for rendering. debug ( bool , default: False ) \u2013 Set or clear debug flag.","title":"Renderer"},{"location":"api/#samtts.Renderer.config","text":"Configure renderer parameters. Parameters: speed ( int | None , default: None ) \u2013 Set speed value. pitch ( int | None , default: None ) \u2013 Set pitch value. mouth ( int | None , default: None ) \u2013 Set mouth value. throat ( int | None , default: None ) \u2013 Set throat value. sing_mode ( bool | None , default: None ) \u2013 Set or clear sing_mode flag.","title":"config"},{"location":"api/#samtts.Renderer.render","text":"Render sound waveform. When it is successful, the audio data is stored in self.buffer . And the length of the valid data is stored in self.buffer_end . Parameters: processor ( Processor ) \u2013 A Processor instance that has output parameters prepared. Returns: bool \u2013 Whether the sound waveform are rendered successfully.","title":"render"},{"location":"api/#samtts.SamTTS","text":"SamTTS combines Reciter, Processor and Renderer together. Parameters: speed ( int , default: 72 ) \u2013 Set speed value. pitch ( int , default: 64 ) \u2013 Set pitch value. mouth ( int , default: 128 ) \u2013 Set mouth value. throat ( int , default: 128 ) \u2013 Set throat value. sing_mode ( bool , default: False ) \u2013 Set or clear sing_mode flag. buffer_size ( int , default: 220500 ) \u2013 Set a large enough buffer size for rendering. debug ( bool , default: False ) \u2013 Set or clear debug flag.","title":"SamTTS"},{"location":"api/#samtts.SamTTS.get_audio_data","text":"Get audio data from input text or phonemes. It can only process very short inputs. Parameters: input_data ( str | bytes | bytearray ) \u2013 The input text or phonemes. phonetic ( bool , default: False ) \u2013 The flag indicates if the input is phonemes. speed ( int | None , default: None ) \u2013 Set speed value. pitch ( int | None , default: None ) \u2013 Set pitch value. mouth ( int | None , default: None ) \u2013 Set mouth value. throat ( int | None , default: None ) \u2013 Set throat value. sing_mode ( bool | None , default: None ) \u2013 Set or clear sing_mode flag. sample_rate ( int , default: 22050 ) \u2013 The sample rate of the audio data. It can be one of 5513, 11025 and 22050. Returns: bytearray \u2013 The rendered audio data bytearray.","title":"get_audio_data"},{"location":"api/#samtts.SamTTS.iter_audio_data_from_paragraph","text":"Get audio data from a paragraph segment by segment. Parameters: paragraph ( str ) \u2013 The input string paragraph. phonetic ( bool , default: False ) \u2013 The flag indicates if the input is phonemes. speed ( int | None , default: None ) \u2013 Set speed value. pitch ( int | None , default: None ) \u2013 Set pitch value. mouth ( int | None , default: None ) \u2013 Set mouth value. throat ( int | None , default: None ) \u2013 Set throat value. sing_mode ( bool | None , default: None ) \u2013 Set or clear sing_mode flag. sample_rate ( int , default: 22050 ) \u2013 The sample rate of the audio data. It can be one of 5513, 11025 and 22050. iter_segments_from_paragraph ( Callable , default: iter_by_punctuations ) \u2013 The iter_segments_from_paragraph function whose signature is: iter_segments_from_paragraph(paragraph: str) -> Iterable[str] Yields: Iterable [ bytearray ] \u2013 Audio data.","title":"iter_audio_data_from_paragraph"},{"location":"api/#samtts.SamTTS.save","text":"Save audio data from a paragraph to output file. Parameters: paragraph ( str ) \u2013 The input paragraph. output_file_path ( str ) \u2013 The path of the output file. phonetic ( bool , default: False ) \u2013 The flag indicates if the input is phonemes. speed ( int | None , default: None ) \u2013 Set speed value. pitch ( int | None , default: None ) \u2013 Set pitch value. mouth ( int | None , default: None ) \u2013 Set mouth value. throat ( int | None , default: None ) \u2013 Set throat value. sing_mode ( bool | None , default: None ) \u2013 Set or clear sing_mode flag. sample_rate ( int , default: 22050 ) \u2013 The sample rate of the audio data. It can be one of 5513, 11025 and 22050. iter_segments_from_paragraph ( Callable , default: iter_by_punctuations ) \u2013 The iter_segments_from_paragraph function whose signature is: iter_segments_from_paragraph(paragraph: str) -> Iterable[str] save_audio_data ( Callable , default: save_audio_data_in_wav_format ) \u2013 The save_audio_data function whose signature is: save_audio_data( audio_data: bytes | bytearray, output_file_path: str, num_channels: int, bytes_per_sample: int, sample_rate: int, )","title":"save"},{"location":"api/#samtts.SamTTS.play","text":"Play audio data from a paragraph. Parameters: paragraph ( str ) \u2013 The input paragraph. phonetic ( bool , default: False ) \u2013 The flag indicates if the input is phonemes. speed ( int | None , default: None ) \u2013 Set speed value. pitch ( int | None , default: None ) \u2013 Set pitch value. mouth ( int | None , default: None ) \u2013 Set mouth value. throat ( int | None , default: None ) \u2013 Set throat value. sing_mode ( bool | None , default: None ) \u2013 Set or clear sing_mode flag. sample_rate ( int , default: 22050 ) \u2013 The sample rate of the audio data. It can be one of 5513, 11025 and 22050. iter_segments_from_paragraph ( Callable , default: iter_by_punctuations ) \u2013 The iter_segments_from_paragraph function whose signature is: iter_segments_from_paragraph(paragraph: str) -> Iterable[str] play_audio_data ( Callable , default: play_audio_data_with_simpleaudio ) \u2013 The play_audio_data function whose signature is: play_audio_data( audio_data: bytes | bytearray, num_channels: int, bytes_per_sample: int, sample_rate: int, )","title":"play"},{"location":"api/#samtts.SamTTS.async_play","text":"Async play audio data from a paragraph. Parameters: paragraph ( str ) \u2013 The input paragraph. phonetic ( bool , default: False ) \u2013 The flag indicates if the input is phonemes. speed ( int | None , default: None ) \u2013 Set speed value. pitch ( int | None , default: None ) \u2013 Set pitch value. mouth ( int | None , default: None ) \u2013 Set mouth value. throat ( int | None , default: None ) \u2013 Set throat value. sing_mode ( bool | None , default: None ) \u2013 Set or clear sing_mode flag. sample_rate ( int , default: 22050 ) \u2013 The sample rate of the audio data. It can be one of 5513, 11025 and 22050. iter_segments_from_paragraph ( Callable , default: iter_by_punctuations ) \u2013 The iter_segments_from_paragraph function whose signature is: iter_segments_from_paragraph(paragraph: str) -> Iterable[str] async_play_audio_data ( Awaitable , default: async_play_audio_data_with_simpleaudio ) \u2013 The async_play_audio_data function whose signature is: async_play_audio_data( audio_data: bytes | bytearray, num_channels: int, bytes_per_sample: int, sample_rate: int, )","title":"async_play"}]}